function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 31-Jan-2018 12:42:39.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 4xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 4xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 4xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 4xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 4xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0.0004;
x1_step1.gain = 0.000199888819839517;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = [19.3901234;19.3745027;19.3172446;19.4171012];
x2_step1.gain = [0.0217097944379131;0.0221765517084308;0.0257250864506322;0.02971878422118];
x2_step1.ymin = -1;

% Layer 1
b1 = [-0.66133081068885768428;-2.6323503933777057107;-1.2873689586287373476;0.25866728629362450986;-0.41365366098733108435;0.062126342194554720622;0.00070040819299519092075;0.11368971618302355087;4.2813416636149517203;-2.5887209233356154314];
IW1_1 = [0.040359987361284412055 0.009353336873728286191;1.6101618902389454036 -0.61858879838684499575;0.0992760306149170213 -0.15913462240727987984;-0.084964537743244347712 0.10982212119524480121;0.0015340008215501072311 0.0021439475746378743905;-0.00032529136077810851891 0.00057569747809933216522;-0.00014889433993442164998 0.00052169407669093231447;-0.006236769136167713036 0.0065015332598756360796;0.6608518877695415128 0.15997788107181368233;-0.13616362843586132803 0.21327904831888411241];
IW1_2 = [1.2001431853473991662 0.19268809030400918525 -0.24048713423343343054 -0.31900682058477120018 -0.75805016276914682916 0.2392459865131886243 0.37446038766078060256 -0.50255060061331813248;-0.18592483813529681047 1.0306635824576990679 -0.52918226983774130368 1.5283578280306298058 0.044418433331703012501 0.71557490431044212809 0.11901763692903048752 1.7036675323740264609;0.79757585075207082514 -0.39041564777569620626 0.27530905533016419851 -0.57860265396347165812 0.70300430991136553249 -1.1094127514022638081 -0.46416175687446242781 0.63262254642133464166;-0.73617114762183333276 0.44917723323767627663 1.2092287756532478227 -0.97011641726311093059 -0.17286824882468165843 0.47137231502123821958 -1.0640912591980380419 1.2411892357092917383;-0.11568119813105076643 -0.054888880469109849192 -0.020673974376212812115 0.15891584566680466706 -0.14612758119765301146 -0.072148073064936493748 -0.034289560970732768652 0.18812526889414682429;0.005303875341694826509 -0.049308792083822008956 0.090693044305474701527 -0.0674864202579178174 -0.0021257426382998260983 -0.02506092731095389825 0.022647181350320406967 -0.033935180900213343658;0.048936102146412176206 -0.1511284624650283126 0.030712015352133234525 0.11158899126487378806 0.0098992884205755856536 -0.075453875668215389383 -0.020759643887232753778 0.089583212408801363158;-0.1068892529203033237 0.080304818093399440992 0.16382615059437641292 -0.054935445548885741829 -0.010419990739368978003 0.044843489507814700279 -0.066921307529556758875 0.17422154163683845063;-2.4201129165377555097 -1.1023952476451581717 0.37013751231423841492 0.93459846634982968183 -1.7980659525731392812 -0.13821309720625843398 -0.85996983529789072787 0.87135320254323667122;0.60647404056473297462 0.068508987620242836614 0.21831397521182865917 0.34049121094553497224 -0.34262877777682265723 -0.4236682387739132416 -1.1684402776220275122 0.25872402024239254947];

% Layer 2
b2 = [-0.7199720739025500249;0.05530281218305579255;-0.51264289994880851697;0.075316913488370912377];
LW2_1 = [0.43309852161565320916 0.0028555519910614252099 0.002069040185882831985 -0.045883764091882751901 -3.4650529901809945521 -3.1756674161408784407 3.8456176371715304896 1.4744227796371198735 -0.017409704780950552294 0.32825159429458655724;0.18282420606762128656 0.0025000351195706769884 -0.27300069042693625443 -0.4147381134724849594 -1.3068919028727603582 -3.3712026598826803081 -1.1878448894935527136 4.0277992279879653026 -0.0032404078738646163553 0.84169365292457964944;0.15731969859566016789 0.0037307484047432305611 -0.41924617984180384545 -0.70839087799470623619 -0.99284307311086505976 3.9381719768413789851 1.072763149490042256 6.1767561604078524695 -0.0035787215563036762871 0.91496286973810125875;0.070635037077070084166 0.0016088689045624770656 -0.28920140279148087714 -0.43671374600490603379 -0.35109695778455290993 -3.0852555481781798186 2.3922290033162783018 3.8439285211611813331 -0.00080898503385443912977 0.56028270409029445887];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0217097944379131;0.0221765517084308;0.0257250864506322;0.02971878422118];
y1_step1.xoffset = [19.3901234;19.3745027;19.3172446;19.4171012];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
